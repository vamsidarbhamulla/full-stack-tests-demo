{
	"@programName": "ZAP",
	"@version": "2.15.0",
	"@generated": "Tue, 7 Jan 2025 04:48:46",
	"site":[ 
		{
			"@name": "http://backend:5500",
			"@host": "backend",
			"@port": "5500",
			"@ssl": "false",
			"alerts": [ 
				{
					"pluginid": "40018",
					"alertRef": "40018",
					"alert": "SQL Injection",
					"name": "SQL Injection",
					"riskcode": "3",
					"confidence": "2",
					"riskdesc": "High (Medium)",
					"desc": "<p>SQL injection may be possible.</p>",
					"instances":[ 
						{
							"uri": "http://backend:5500/api/client_login",
							"method": "POST",
							"param": "password",
							"attack": "John Doe\" AND \"1\"=\"1\" -- ",
							"evidence": "",
							"otherinfo": "The page results were successfully manipulated using the boolean conditions [John Doe\" AND \"1\"=\"1\" -- ] and [John Doe\" AND \"1\"=\"2\" -- ]\nThe parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison.\nData was returned for the original parameter.\nThe vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter."
						},
						{
							"uri": "http://backend:5500/api/client_registeration",
							"method": "POST",
							"param": "email",
							"attack": "John Doe\" AND \"1\"=\"1\" -- ",
							"evidence": "",
							"otherinfo": "The page results were successfully manipulated using the boolean conditions [John Doe\" AND \"1\"=\"1\" -- ] and [John Doe\" AND \"1\"=\"2\" -- ]\nThe parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison.\nData was returned for the original parameter.\nThe vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter."
						}
					],
					"count": "2",
					"solution": "<p>Do not trust client side input, even if there is client side validation in place.</p><p>In general, type check all data on the server side.</p><p>If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'</p><p>If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.</p><p>If database Stored Procedures can be used, use them.</p><p>Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!</p><p>Do not create dynamic SQL queries using simple string concatenation.</p><p>Escape all data received from the client.</p><p>Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.</p><p>Apply the principle of least privilege by using the least privileged database user possible.</p><p>In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.</p><p>Grant the minimum database access that is necessary for the application.</p>",
					"otherinfo": "<p>The page results were successfully manipulated using the boolean conditions [John Doe\" AND \"1\"=\"1\" -- ] and [John Doe\" AND \"1\"=\"2\" -- ]</p><p>The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparison.</p><p>Data was returned for the original parameter.</p><p>The vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter.</p>",
					"reference": "<p>https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html</p>",
					"cweid": "89",
					"wascid": "19",
					"sourceid": "521"
				},
				{
					"pluginid": "100000",
					"alertRef": "100000",
					"alert": "A Server Error response code was returned by the server",
					"name": "A Server Error response code was returned by the server",
					"riskcode": "1",
					"confidence": "3",
					"riskdesc": "Low (High)",
					"desc": "<p>A response code of 500 was returned by the server.</p><p>This may indicate that the application is failing to handle unexpected input correctly.</p><p>Raised by the 'Alert on HTTP Response Code Error' script</p>",
					"instances":[ 
						{
							"uri": "http://backend:5500/api/products?source=http%3A%2F%2Fwww.google.com",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 500",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/products?source=http%3A%2F%2Fwww.google.com%2F",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 500",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/products?source=http%3A%2F%2Fwww.google.com%2Fsearch%3Fq%3DZAP",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 500",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/products?source=http%3A%2F%2Fwww.google.com%3A80%2F",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 500",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/products?source=http%3A%2F%2Fwww.google.com%3A80%2Fsearch%3Fq%3DZAP",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 500",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/client_login",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 500",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/client_registeration",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 500",
							"otherinfo": ""
						}
					],
					"count": "7",
					"solution": "",
					"otherinfo": "",
					"reference": "",
					"cweid": "388",
					"wascid": "20",
					"sourceid": "108"
				},
				{
					"pluginid": "10036",
					"alertRef": "10036",
					"alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
					"name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
					"riskcode": "1",
					"confidence": "3",
					"riskdesc": "Low (High)",
					"desc": "<p>The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.</p>",
					"instances":[ 
						{
							"uri": "http://backend:5500/api/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/2.3.7 Python/3.11.11",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/health",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/2.3.7 Python/3.11.11",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/products?source=source",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/2.3.7 Python/3.11.11",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/swagger.json",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/2.3.7 Python/3.11.11",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/client_login",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/2.3.7 Python/3.11.11",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/client_registeration",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/2.3.7 Python/3.11.11",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/update_info",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "Werkzeug/2.3.7 Python/3.11.11",
							"otherinfo": ""
						}
					],
					"count": "7",
					"solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.</p>",
					"otherinfo": "",
					"reference": "<p>https://httpd.apache.org/docs/current/mod/core.html#servertokens</p><p>https://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)</p><p>https://www.troyhunt.com/shhh-dont-let-your-response-headers/</p>",
					"cweid": "200",
					"wascid": "13",
					"sourceid": "3"
				},
				{
					"pluginid": "100001",
					"alertRef": "100001",
					"alert": "Unexpected Content-Type was returned",
					"name": "Unexpected Content-Type was returned",
					"riskcode": "1",
					"confidence": "3",
					"riskdesc": "Low (High)",
					"desc": "<p>A Content-Type of text/html was returned by the server.</p><p>This is not one of the types expected to be returned by an API.</p><p>Raised by the 'Alert on Unexpected Content Types' script</p>",
					"instances":[ 
						{
							"uri": "http://backend:5500",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/7647290113572598249",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/7979436631567340327",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/actuator/health",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/health/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/products/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/swagger.json/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/client_login/",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/client_registeration/",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/update_info/",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/latest/meta-data/",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "text/html",
							"otherinfo": ""
						}
					],
					"count": "13",
					"solution": "",
					"otherinfo": "",
					"reference": "",
					"cweid": "-1",
					"wascid": "-1",
					"sourceid": "14"
				},
				{
					"pluginid": "10021",
					"alertRef": "10021",
					"alert": "X-Content-Type-Options Header Missing",
					"name": "X-Content-Type-Options Header Missing",
					"riskcode": "1",
					"confidence": "2",
					"riskdesc": "Low (Medium)",
					"desc": "<p>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</p>",
					"instances":[ 
						{
							"uri": "http://backend:5500/api/",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://backend:5500/api/health",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://backend:5500/api/products?source=source",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://backend:5500/swagger.json",
							"method": "GET",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://backend:5500/api/client_login",
							"method": "POST",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://backend:5500/api/client_registeration",
							"method": "POST",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						},
						{
							"uri": "http://backend:5500/api/update_info",
							"method": "POST",
							"param": "x-content-type-options",
							"attack": "",
							"evidence": "",
							"otherinfo": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses."
						}
					],
					"count": "7",
					"solution": "<p>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.</p><p>If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.</p>",
					"otherinfo": "<p>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.</p><p>At \"High\" threshold this scan rule will not alert on client or server error responses.</p>",
					"reference": "<p>https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)</p><p>https://owasp.org/www-community/Security_Headers</p>",
					"cweid": "693",
					"wascid": "15",
					"sourceid": "3"
				},
				{
					"pluginid": "100000",
					"alertRef": "100000",
					"alert": "A Client Error response code was returned by the server",
					"name": "A Client Error response code was returned by the server",
					"riskcode": "0",
					"confidence": "3",
					"riskdesc": "Informational (High)",
					"desc": "<p>A response code of 404 was returned by the server.</p><p>This may indicate that the application is failing to handle unexpected input correctly.</p><p>Raised by the 'Alert on HTTP Response Code Error' script</p>",
					"instances":[ 
						{
							"uri": "http://backend:5500/7647290113572598249",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 404",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/7979436631567340327",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 404",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/actuator/health",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 404",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/health/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 404",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/products/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 404",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/swagger.json/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 404",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/client_login/",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 404",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/client_registeration/",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 404",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/api/update_info/",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 404",
							"otherinfo": ""
						},
						{
							"uri": "http://backend:5500/latest/meta-data/",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "HTTP/1.1 404",
							"otherinfo": ""
						}
					],
					"count": "10",
					"solution": "",
					"otherinfo": "",
					"reference": "",
					"cweid": "388",
					"wascid": "20",
					"sourceid": "10"
				},
				{
					"pluginid": "10111",
					"alertRef": "10111",
					"alert": "Authentication Request Identified",
					"name": "Authentication Request Identified",
					"riskcode": "0",
					"confidence": "3",
					"riskdesc": "Informational (High)",
					"desc": "<p>The given request has been identified as an authentication request. The 'Other Info' field contains a set of key=value lines which identify any relevant fields. If the request is in a context which has an Authentication Method set to \"Auto-Detect\" then this rule will change the authentication to match the request identified.</p>",
					"instances":[ 
						{
							"uri": "http://backend:5500/api/client_login",
							"method": "POST",
							"param": "email",
							"attack": "",
							"evidence": "password",
							"otherinfo": "userParam=email\nuserValue=John Doe\npasswordParam=password"
						}
					],
					"count": "1",
					"solution": "<p>This is an informational alert rather than a vulnerability and so there is nothing to fix.</p>",
					"otherinfo": "<p>userParam=email</p><p>userValue=John Doe</p><p>passwordParam=password</p>",
					"reference": "<p>https://www.zaproxy.org/docs/desktop/addons/authentication-helper/auth-req-id/</p>",
					"cweid": "-1",
					"wascid": "-1",
					"sourceid": "5"
				},
				{
					"pluginid": "10049",
					"alertRef": "10049",
					"alert": "Non-Storable Content",
					"name": "Non-Storable Content",
					"riskcode": "0",
					"confidence": "2",
					"riskdesc": "Informational (Medium)",
					"desc": "<p>The response contents are not storable by caching components such as proxy servers. If the response does not contain sensitive, personal or user-specific information, it may benefit from being stored and cached, to improve performance.</p>",
					"instances":[ 
						{
							"uri": "http://backend:5500/api/client_login",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "authorization:",
							"otherinfo": ""
						}
					],
					"count": "1",
					"solution": "<p>The content may be marked as storable by ensuring that the following conditions are satisfied:</p><p>The request method must be understood by the cache and defined as being cacheable (\"GET\", \"HEAD\", and \"POST\" are currently defined as cacheable)</p><p>The response status code must be understood by the cache (one of the 1XX, 2XX, 3XX, 4XX, or 5XX response classes are generally understood)</p><p>The \"no-store\" cache directive must not appear in the request or response header fields</p><p>For caching by \"shared\" caches such as \"proxy\" caches, the \"private\" response directive must not appear in the response</p><p>For caching by \"shared\" caches such as \"proxy\" caches, the \"Authorization\" header field must not appear in the request, unless the response explicitly allows it (using one of the \"must-revalidate\", \"public\", or \"s-maxage\" Cache-Control response directives)</p><p>In addition to the conditions above, at least one of the following conditions must also be satisfied by the response:</p><p>It must contain an \"Expires\" header field</p><p>It must contain a \"max-age\" response directive</p><p>For \"shared\" caches such as \"proxy\" caches, it must contain a \"s-maxage\" response directive</p><p>It must contain a \"Cache Control Extension\" that allows it to be cached</p><p>It must have a status code that is defined as cacheable by default (200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501).</p>",
					"otherinfo": "",
					"reference": "<p>https://datatracker.ietf.org/doc/html/rfc7234</p><p>https://datatracker.ietf.org/doc/html/rfc7231</p><p>https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html</p>",
					"cweid": "524",
					"wascid": "13",
					"sourceid": "5"
				},
				{
					"pluginid": "10049",
					"alertRef": "10049",
					"alert": "Storable and Cacheable Content",
					"name": "Storable and Cacheable Content",
					"riskcode": "0",
					"confidence": "2",
					"riskdesc": "Informational (Medium)",
					"desc": "<p>The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where \"shared\" caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.</p>",
					"instances":[ 
						{
							"uri": "http://backend:5500/api/",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"uri": "http://backend:5500/api/health",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"uri": "http://backend:5500/api/products?source=source",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"uri": "http://backend:5500/swagger.json",
							"method": "GET",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"uri": "http://backend:5500/api/client_registeration",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						},
						{
							"uri": "http://backend:5500/api/update_info",
							"method": "POST",
							"param": "",
							"attack": "",
							"evidence": "",
							"otherinfo": "In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234."
						}
					],
					"count": "6",
					"solution": "<p>Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:</p><p>Cache-Control: no-cache, no-store, must-revalidate, private</p><p>Pragma: no-cache</p><p>Expires: 0</p><p>This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.</p>",
					"otherinfo": "<p>In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.</p>",
					"reference": "<p>https://datatracker.ietf.org/doc/html/rfc7234</p><p>https://datatracker.ietf.org/doc/html/rfc7231</p><p>https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html</p>",
					"cweid": "524",
					"wascid": "13",
					"sourceid": "3"
				}
			]
		}
	]
}
