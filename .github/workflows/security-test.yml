name: Dynamic Application Security Tests
on:
  push:
    paths:
      - backend/**
#       - tests/security-tests/** 
#       - .github/workflows/security-test.yml 
#   pull_request:
#     branches: [ main, master ]

env:
  TEST_ENV: local
  CI: true 
  ZAP_API_KEY: ${{ secrets.ZAP_API_KEY }}
  TZ: 'America/Winnipeg' 
       
jobs:
  run-docker-security-test:
    name: Run Security Tests on Docker
    runs-on: ubuntu-22.04
    outputs:
      api_scan_result: ${{ steps.store_api_scan_result.outputs.api_scan_result }}
    steps:
      - uses: actions/checkout@v4
      - name: 'Setup jq'
        uses: dcarbone/install-jq-action@v3
        with:
          version: '1.7'
          force: 'false'
      - name: 'Check jq'
        # language=sh
        run: |
          which jq
          jq --version
#       - name: Run Flask Backend Server
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.13' 
#       - run: |
#             pwd 
#             mkdir -p tests/security-tests/test-results
#             ls -lR 
#             cd backend 
#             pip install -r requirments.txt 
#             FLASK_APP=task_with_swagger.py flask run -h localhost -p 5500 &
#       - name: Create Auth Token for Flask Backend Server
#         uses: actions/setup-python@v5
#         continue-on-error: true
#         with:
#           python-version: '3.13' 
#       - run: |
#             pwd 
#             mkdir -p tests/security-tests/test-results 
#             token=`curl -X POST http://localhost:5500/client_login -d 'userName=Admin&email=admin@test.com&password=admin@1234'`
#       - name: Run DAST Tests with API Scan
#         id: api_scan
#         uses: zaproxy/action-api-scan@v0.9.0
#         env:
#           api_auth_token: ${{ env.api_auth_token }}
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
#           format: openapi
#           fail_action: false
#           target: 'https://localhost:5500/swagger.json'
#           cmd_options: '--hook=tests/security-tests/zap/zap_hook.py -r tests/security-tests/test-results/zaptestreport.html'
#       - name: Store API Scan Result
#         id: store_api_scan_result
#         run: |
#           mkdir -p api_scan_results
#           ls -lR
#           cp tests/security-tests/test-results/zaptestreport.html api_scan_results/
#           ls -lR tests/security-tests/test-results
#           mv **/*.html api_scan_results/ || true
#           ls -lR
#           API_RESULT_FILE=$(find api_scan_results -name "*.html" -type f)
#           API_RESULT_FILE_1=tests/security-tests/test-results/zaptestreport.html
#           echo "::set-output name=api_scan_result::$API_RESULT_FILE"  
#           echo "::set-output name=api_scan_result_1::$API_RESULT_FILE_1"  
#   Upload_Artifacts:
#     needs: [run-docker-security-test]
#     runs-on: ubuntu-22.04
#     steps:
#       - name: Upload API Scan Artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: security-tests-report
#           path: ${{ needs.api_scan.outputs.api_scan_result }}   